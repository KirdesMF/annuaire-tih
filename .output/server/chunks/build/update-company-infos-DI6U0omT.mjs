import{d as o,l as e}from"./index-8Htcofqc.mjs";import{_ as r}from"./companies-l5PKOmvG.mjs";import{d as t}from"./company-categories-CgBd9Wjc.mjs";import{s as a}from"./company.schema-C_XODBeq.mjs";import{c as m,N as n,f as i}from"../nitro/nitro.mjs";import{d as s}from"../_/index2.mjs";import"../_/main.mjs";import"node:events";import"node:buffer";import"node:stream";import"../_/server.mjs";import"node:path";import"./auth-BsEI6_U5.mjs";import"./categories-B1A9pQfz.mjs";import"node:net";import"node:process";import"node:timers";import"node:async_hooks";import"node:url";import"node:stream/web";import"node:crypto";const p=o("app_lib_api_companies_mutations_update-company-infos_ts--updateCompanyInfos_createServerFn_handler","/_server",((o,e)=>d.__executeServer(o,e))),d=m({method:"POST"}).validator((o=>{const e=s(o,{arrays:["categories"],booleans:["rqth"]});return n(a,e)})).handler(p,(async({data:o})=>{const{categories:a,companyId:m,...n}=o;try{await e.transaction((async o=>{await o.update(r).set(n).where(i(r.id,m)),a.length>0&&(await o.delete(t).where(i(t.company_id,m)),await o.insert(t).values(a.map((o=>({company_id:m,category_id:o})))))}))}catch(o){throw console.error("Failed to update company info:",o),new Error("Failed to update company information")}}));export{p as updateCompanyInfos_createServerFn_handler};
//# sourceMappingURL=update-company-infos-DI6U0omT.mjs.map
