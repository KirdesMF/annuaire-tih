import { betterAuth } from 'better-auth';
import { drizzleAdapter } from 'better-auth/adapters/drizzle';
import { admin } from 'better-auth/plugins';
import { l } from './index-8Htcofqc.mjs';
import { pgTable, timestamp, text, boolean, varchar } from 'drizzle-orm/pg-core';
import { reactStartCookies } from 'better-auth/react-start';

const p = ["admin", "user", "superadmin"], x = (i) => i ? p.includes(i) : false, n = pgTable("user", { id: text("id").primaryKey(), name: varchar("first_name", { length: 255 }).notNull(), email: varchar("email", { length: 255 }).notNull().unique(), emailVerified: boolean("email_verified").notNull(), image: varchar("image", { length: 255 }), createdAt: timestamp("created_at").notNull(), updatedAt: timestamp("updated_at").notNull(), role: varchar("role", { length: 255 }).$type().default("user").notNull(), banned: boolean("banned"), banReason: text("ban_reason"), banExpires: timestamp("ban_expires") }), m = pgTable("session", { id: text("id").primaryKey(), expiresAt: timestamp("expires_at").notNull(), token: text("token").notNull().unique(), createdAt: timestamp("created_at").notNull(), updatedAt: timestamp("updated_at").notNull(), ipAddress: text("ip_address"), userAgent: text("user_agent"), userId: text("user_id").notNull().references(() => n.id, { onDelete: "cascade" }), impersonatedBy: text("impersonated_by") }), _ = pgTable("account", { id: text("id").primaryKey(), accountId: text("account_id").notNull(), providerId: text("provider_id").notNull(), userId: text("user_id").notNull().references(() => n.id, { onDelete: "cascade" }), accessToken: text("access_token"), refreshToken: text("refresh_token"), idToken: text("id_token"), accessTokenExpiresAt: timestamp("access_token_expires_at"), refreshTokenExpiresAt: timestamp("refresh_token_expires_at"), scope: text("scope"), password: text("password"), createdAt: timestamp("created_at").notNull(), updatedAt: timestamp("updated_at").notNull() }), f = pgTable("verification", { id: text("id").primaryKey(), identifier: text("identifier").notNull(), value: text("value").notNull(), expiresAt: timestamp("expires_at").notNull(), createdAt: timestamp("created_at"), updatedAt: timestamp("updated_at") }), y = betterAuth({ database: drizzleAdapter(l, { provider: "pg", schema: { user: n, session: m, account: _, verification: f } }), session: { cookieCache: { enabled: true, maxAge: 5 * 60 } }, plugins: [admin({ adminRoles: ["admin", "superadmin"] }), reactStartCookies()], advanced: { generateId: false }, emailAndPassword: { enabled: true } });

export { n, x, y };
//# sourceMappingURL=auth.server-CEln8Kin.mjs.map
