var e=/^\d+$/u,t=/^-?\d*(?:\.\d+)?$/u,n=/^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])$/u,s=/^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])T(?:0\d|1\d|2[0-3]):[0-5]\d$/u,o=/^(?:0\d|1\d|2[0-3]):[0-5]\d$/u,l=/^(?:0\d|1\d|2[0-3])(?::[0-5]\d){2}$/u,i=/^\d{4}-W(?:0[1-9]|[1-4]\d|5[0-3])$/u;function getFieldDate(t){if(!t||"null"===t)return null;if("undefined"!==t){if(n.test(t))return new Date(`${t}T00:00:00.000Z`);if(s.test(t))return new Date(`${t}:00.000Z`);if(i.test(t)){const[e,n]=t.split("-W"),s=new Date(`${e}-01-01T00:00:00.000Z`);return s.setUTCDate(7*(+n-1)+1),s}return o.test(t)?new Date(`1970-01-01T${t}:00.000Z`):l.test(t)?new Date(`1970-01-01T${t}.000Z`):e.test(t)?new Date(+t):new Date(t)}}function getFieldValue(e,n,s){if(e?.booleans?.includes(n))return function(e){return e&&"null"!==e?"undefined"!==e?!("false"===e||"off"===e||"0"===e):void 0:null}(s);if("string"==typeof s){if(e?.dates?.includes(n))return getFieldDate(s);if(e?.numbers?.includes(n))return function(e){return e&&"null"!==e?"undefined"!==e?t.test(e)?Number(e):getFieldDate(e).getTime():void 0:null}(s)}return s}function getPathObject(e,t,n){return e.reduce(((e,n,s)=>e[n]=e[n]||("$"===t[s+1]?[]:{})),n)}function getValuePaths(e,t){const n=[];if(e.includes(".$.")){const addArrayItemPaths=(e,s)=>{const[o,...l]=e.split(".$."),i=s?`${s}.${o}`:o,r=getPathObject(i.split("."),e.split("."),t);for(let e=0;e<r.length;e++){const t=`${i}.${e}`;l.length>1?addArrayItemPaths(l.join(".$."),t):n.push(`${t}.${l[0]}`)}};addArrayItemPaths(e)}else n.push(e);return n}function decode(e,t,n){const[s,o]="function"==typeof t?[void 0,t]:[t,n];if(s)for(const e of["arrays","booleans","dates","files","numbers"])s[e]?.length&&(s[e]=s[e].map((e=>e.replace(/\[\$\]/g,".$"))));const l={};for(const[t,n]of e.entries()){const e=t.replace(/\[(\d+)\]/g,".$1"),i=e.replace(/\.\d+\./g,".$.").replace(/\.\d+$/,".$"),r=e.split("."),u=i.split(".");let c=l;for(let e=0;e<r.length;e++){const l=r[e];if("__proto__"===l||"prototype"===l||"constructor"===l)break;if(e<r.length-1)if(c[l])c=c[l];else{const t=e<r.length-2?"$"===u[e+1]:s?.arrays?.includes(u.slice(0,-1).join("."));c=c[l]=t?[]:{}}else if(!s?.files?.includes(i)||n&&("string"==typeof n||n.size)){let e=getFieldValue(s,i,n);o&&(e=o({path:t,input:n,output:e})),s?.arrays?.includes(i)?c[l]?c[l].push(e):c[l]=[e]:c[l]=e}}}if(s?.arrays)for(const e of s.arrays){const t=getValuePaths(e,l);for(const n of t){const t=n.split("."),s=t[t.length-1],o=getPathObject(t.slice(0,-1),e.split("."),l);o[s]||(o[s]=[])}}if(s?.booleans)for(const e of s.booleans){const t=getValuePaths(e,l);for(const n of t){const t=n.split("."),s=t[t.length-1],o=getPathObject(t.slice(0,-1),e.split("."),l);!0!==o[s]&&(o[s]=!1)}}return l}export{decode as d};
//# sourceMappingURL=index2.mjs.map
