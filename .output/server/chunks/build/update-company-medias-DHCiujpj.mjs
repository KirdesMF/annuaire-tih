import{d as e}from"../_/index2.mjs";import{d as a,l as r}from"./index-8Htcofqc.mjs";import{_ as o}from"./companies-l5PKOmvG.mjs";import{p as i,a as t,l}from"./company.schema-C_XODBeq.mjs";import{c as n,N as p,f as s}from"../nitro/nitro.mjs";import{_ as d,f as c}from"./cloudinary-BTIR3bRv.mjs";import"../_/main.mjs";import"node:events";import"node:buffer";import"node:stream";import"../_/server.mjs";import"node:path";import"./auth-BsEI6_U5.mjs";import"node:net";import"node:process";import"node:timers";import"node:async_hooks";import"node:url";import"node:stream/web";import"node:crypto";import"node:querystring";const h=async(e,a)=>r.update(o).set(a).where(s(o.id,e)),m=a("app_lib_api_companies_mutations_update-company-medias_ts--updateCompanyMedia_createServerFn_handler","/_server",((e,a)=>y.__executeServer(e,a))),u=a("app_lib_api_companies_mutations_update-company-medias_ts--updateCompanyLogo_createServerFn_handler","/_server",((e,a)=>g.__executeServer(e,a))),_=a("app_lib_api_companies_mutations_update-company-medias_ts--updateCompanyGallery_createServerFn_handler","/_server",((e,a)=>f.__executeServer(e,a))),y=n({method:"POST"}).validator((a=>{const r=e(a,{files:["logo","gallery"],arrays:["gallery","gallery_public_id"]});return p(i,r)})).handler(m,(async({data:e})=>{try{const{logo:a,gallery:i,logo_public_id:t,gallery_public_id:l,companyId:n}=e,[p]=await r.select().from(o).where(s(o.id,n));if(a&&a.size>0&&t){const e=await d({file:a,publicId:t});await h(n,{logo:{secureUrl:e.secure_url,publicId:e.public_id}})}if(i&&l){const e=[...p.gallery||[]];await Promise.all(i.map((async(a,r)=>{if(!a.size)return;const o=l[r]?await d({file:a,publicId:l[r]}):await c({type:"gallery",file:a,companyId:n,companySlug:p.slug});e[r]={secureUrl:o.secure_url,publicId:o.public_id}}))),await h(n,{gallery:e})}}catch(e){throw console.error("Failed to update company media:",e),new Error("Failed to update company media")}})),g=n({method:"POST"}).validator((a=>{const r=e(a,{files:["logo"]});return p(t,r)})).handler(u,(async({data:e})=>{const{logo:a,logo_public_id:i,companyId:t}=e;if(!(null==a?void 0:a.size))throw new Error("Aucune image de logo fournie");const[l]=await r.select().from(o).where(s(o.id,t)),{secure_url:n,public_id:p}=i?await d({file:a,publicId:i}):await c({type:"logo",file:a,companyId:t,companySlug:l.slug});return await r.update(o).set({logo:{secureUrl:n,publicId:p}}).where(s(o.id,t)),{secure_url:n,public_id:p}})),f=n({method:"POST"}).validator((a=>{const r=e(a,{files:["gallery"],arrays:["gallery","gallery_public_id"]});return p(l,r)})).handler(_,(async({data:e})=>{const{gallery:a,gallery_public_id:i,companyId:t}=e;if(!a)throw new Error("Aucune image de galerie fournie");const[l]=await r.select().from(o).where(s(o.id,t)),n=[...l.gallery||[]];return await Promise.all(a.map((async(e,a)=>{if(!e.size)return;const r=(null==i?void 0:i[a])?await d({file:e,publicId:i[a]}):await c({type:"gallery",file:e,companyId:t,companySlug:l.slug});n[a]={secureUrl:r.secure_url,publicId:r.public_id}}))),await r.update(o).set({gallery:n}).where(s(o.id,t)),n}));export{_ as updateCompanyGallery_createServerFn_handler,u as updateCompanyLogo_createServerFn_handler,m as updateCompanyMedia_createServerFn_handler};
//# sourceMappingURL=update-company-medias-DHCiujpj.mjs.map
