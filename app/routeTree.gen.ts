/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SourcesImport } from './routes/sources'
import { Route as PartnerImport } from './routes/partner'
import { Route as FaqImport } from './routes/faq'
import { Route as ContactImport } from './routes/contact'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as EntrepreneursIndexImport } from './routes/entrepreneurs/index'
import { Route as CategoriesIndexImport } from './routes/categories/index'
import { Route as CategoriesCategoryIdImport } from './routes/categories/$categoryId'
import { Route as ProtectedSuccessImport } from './routes/_protected/success'
import { Route as ProtectedReferenceImport } from './routes/_protected/reference'
import { Route as ProtectedAdminImport } from './routes/_protected/admin'
import { Route as ProtectedAccountImport } from './routes/_protected/account'
import { Route as AuthSignupImport } from './routes/_auth/signup'
import { Route as AuthResetPasswordImport } from './routes/_auth/reset-password'
import { Route as AuthLogoutImport } from './routes/_auth/logout'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as AuthForgotPasswordImport } from './routes/_auth/forgot-password'

// Create/Update Routes

const SourcesRoute = SourcesImport.update({
  id: '/sources',
  path: '/sources',
  getParentRoute: () => rootRoute,
} as any)

const PartnerRoute = PartnerImport.update({
  id: '/partner',
  path: '/partner',
  getParentRoute: () => rootRoute,
} as any)

const FaqRoute = FaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EntrepreneursIndexRoute = EntrepreneursIndexImport.update({
  id: '/entrepreneurs/',
  path: '/entrepreneurs/',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesIndexRoute = CategoriesIndexImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesCategoryIdRoute = CategoriesCategoryIdImport.update({
  id: '/categories/$categoryId',
  path: '/categories/$categoryId',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedSuccessRoute = ProtectedSuccessImport.update({
  id: '/_protected/success',
  path: '/success',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedReferenceRoute = ProtectedReferenceImport.update({
  id: '/_protected/reference',
  path: '/reference',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedAdminRoute = ProtectedAdminImport.update({
  id: '/_protected/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedAccountRoute = ProtectedAccountImport.update({
  id: '/_protected/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/_auth/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const AuthResetPasswordRoute = AuthResetPasswordImport.update({
  id: '/_auth/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const AuthLogoutRoute = AuthLogoutImport.update({
  id: '/_auth/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/_auth/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqImport
      parentRoute: typeof rootRoute
    }
    '/partner': {
      id: '/partner'
      path: '/partner'
      fullPath: '/partner'
      preLoaderRoute: typeof PartnerImport
      parentRoute: typeof rootRoute
    }
    '/sources': {
      id: '/sources'
      path: '/sources'
      fullPath: '/sources'
      preLoaderRoute: typeof SourcesImport
      parentRoute: typeof rootRoute
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/logout': {
      id: '/_auth/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof AuthLogoutImport
      parentRoute: typeof rootRoute
    }
    '/_auth/reset-password': {
      id: '/_auth/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof AuthResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/_protected/account': {
      id: '/_protected/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof ProtectedAccountImport
      parentRoute: typeof rootRoute
    }
    '/_protected/admin': {
      id: '/_protected/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminImport
      parentRoute: typeof rootRoute
    }
    '/_protected/reference': {
      id: '/_protected/reference'
      path: '/reference'
      fullPath: '/reference'
      preLoaderRoute: typeof ProtectedReferenceImport
      parentRoute: typeof rootRoute
    }
    '/_protected/success': {
      id: '/_protected/success'
      path: '/success'
      fullPath: '/success'
      preLoaderRoute: typeof ProtectedSuccessImport
      parentRoute: typeof rootRoute
    }
    '/categories/$categoryId': {
      id: '/categories/$categoryId'
      path: '/categories/$categoryId'
      fullPath: '/categories/$categoryId'
      preLoaderRoute: typeof CategoriesCategoryIdImport
      parentRoute: typeof rootRoute
    }
    '/categories/': {
      id: '/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/entrepreneurs/': {
      id: '/entrepreneurs/'
      path: '/entrepreneurs'
      fullPath: '/entrepreneurs'
      preLoaderRoute: typeof EntrepreneursIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/partner': typeof PartnerRoute
  '/sources': typeof SourcesRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/logout': typeof AuthLogoutRoute
  '/reset-password': typeof AuthResetPasswordRoute
  '/signup': typeof AuthSignupRoute
  '/account': typeof ProtectedAccountRoute
  '/admin': typeof ProtectedAdminRoute
  '/reference': typeof ProtectedReferenceRoute
  '/success': typeof ProtectedSuccessRoute
  '/categories/$categoryId': typeof CategoriesCategoryIdRoute
  '/categories': typeof CategoriesIndexRoute
  '/entrepreneurs': typeof EntrepreneursIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/partner': typeof PartnerRoute
  '/sources': typeof SourcesRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/logout': typeof AuthLogoutRoute
  '/reset-password': typeof AuthResetPasswordRoute
  '/signup': typeof AuthSignupRoute
  '/account': typeof ProtectedAccountRoute
  '/admin': typeof ProtectedAdminRoute
  '/reference': typeof ProtectedReferenceRoute
  '/success': typeof ProtectedSuccessRoute
  '/categories/$categoryId': typeof CategoriesCategoryIdRoute
  '/categories': typeof CategoriesIndexRoute
  '/entrepreneurs': typeof EntrepreneursIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/partner': typeof PartnerRoute
  '/sources': typeof SourcesRoute
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/logout': typeof AuthLogoutRoute
  '/_auth/reset-password': typeof AuthResetPasswordRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/_protected/account': typeof ProtectedAccountRoute
  '/_protected/admin': typeof ProtectedAdminRoute
  '/_protected/reference': typeof ProtectedReferenceRoute
  '/_protected/success': typeof ProtectedSuccessRoute
  '/categories/$categoryId': typeof CategoriesCategoryIdRoute
  '/categories/': typeof CategoriesIndexRoute
  '/entrepreneurs/': typeof EntrepreneursIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/faq'
    | '/partner'
    | '/sources'
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/reset-password'
    | '/signup'
    | '/account'
    | '/admin'
    | '/reference'
    | '/success'
    | '/categories/$categoryId'
    | '/categories'
    | '/entrepreneurs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/faq'
    | '/partner'
    | '/sources'
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/reset-password'
    | '/signup'
    | '/account'
    | '/admin'
    | '/reference'
    | '/success'
    | '/categories/$categoryId'
    | '/categories'
    | '/entrepreneurs'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/faq'
    | '/partner'
    | '/sources'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/logout'
    | '/_auth/reset-password'
    | '/_auth/signup'
    | '/_protected/account'
    | '/_protected/admin'
    | '/_protected/reference'
    | '/_protected/success'
    | '/categories/$categoryId'
    | '/categories/'
    | '/entrepreneurs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  FaqRoute: typeof FaqRoute
  PartnerRoute: typeof PartnerRoute
  SourcesRoute: typeof SourcesRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthLogoutRoute: typeof AuthLogoutRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthSignupRoute: typeof AuthSignupRoute
  ProtectedAccountRoute: typeof ProtectedAccountRoute
  ProtectedAdminRoute: typeof ProtectedAdminRoute
  ProtectedReferenceRoute: typeof ProtectedReferenceRoute
  ProtectedSuccessRoute: typeof ProtectedSuccessRoute
  CategoriesCategoryIdRoute: typeof CategoriesCategoryIdRoute
  CategoriesIndexRoute: typeof CategoriesIndexRoute
  EntrepreneursIndexRoute: typeof EntrepreneursIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  FaqRoute: FaqRoute,
  PartnerRoute: PartnerRoute,
  SourcesRoute: SourcesRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthLogoutRoute: AuthLogoutRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthSignupRoute: AuthSignupRoute,
  ProtectedAccountRoute: ProtectedAccountRoute,
  ProtectedAdminRoute: ProtectedAdminRoute,
  ProtectedReferenceRoute: ProtectedReferenceRoute,
  ProtectedSuccessRoute: ProtectedSuccessRoute,
  CategoriesCategoryIdRoute: CategoriesCategoryIdRoute,
  CategoriesIndexRoute: CategoriesIndexRoute,
  EntrepreneursIndexRoute: EntrepreneursIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/contact",
        "/faq",
        "/partner",
        "/sources",
        "/_auth/forgot-password",
        "/_auth/login",
        "/_auth/logout",
        "/_auth/reset-password",
        "/_auth/signup",
        "/_protected/account",
        "/_protected/admin",
        "/_protected/reference",
        "/_protected/success",
        "/categories/$categoryId",
        "/categories/",
        "/entrepreneurs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/faq": {
      "filePath": "faq.tsx"
    },
    "/partner": {
      "filePath": "partner.tsx"
    },
    "/sources": {
      "filePath": "sources.tsx"
    },
    "/_auth/forgot-password": {
      "filePath": "_auth/forgot-password.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx"
    },
    "/_auth/logout": {
      "filePath": "_auth/logout.tsx"
    },
    "/_auth/reset-password": {
      "filePath": "_auth/reset-password.tsx"
    },
    "/_auth/signup": {
      "filePath": "_auth/signup.tsx"
    },
    "/_protected/account": {
      "filePath": "_protected/account.tsx"
    },
    "/_protected/admin": {
      "filePath": "_protected/admin.tsx"
    },
    "/_protected/reference": {
      "filePath": "_protected/reference.tsx"
    },
    "/_protected/success": {
      "filePath": "_protected/success.tsx"
    },
    "/categories/$categoryId": {
      "filePath": "categories/$categoryId.tsx"
    },
    "/categories/": {
      "filePath": "categories/index.tsx"
    },
    "/entrepreneurs/": {
      "filePath": "entrepreneurs/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
