import{eq as d}from"drizzle-orm";import{decode as y}from"decode-formdata";import{c as _,d as s}from"./index-8Htcofqc.js";import{c as r}from"./companies-l5PKOmvG.js";import{U as S,L as v,G as C}from"./company.schema-C_XODBeq.js";import*as g from"valibot";import{b as u,u as f}from"./cloudinary-BTIR3bRv.js";import{createServerFn as w}from"@tanstack/start-client-core";import"tiny-invariant";import"drizzle-orm/postgres-js";import"postgres";import"dotenv";import"drizzle-orm/pg-core";import"./auth-BsEI6_U5.js";import"nanoid";import"cloudinary";const h=async(a,e)=>s.update(r).set(e).where(d(r.id,a)),I=_("app_lib_api_companies_mutations_update-company-medias_ts--updateCompanyMedia_createServerFn_handler","/_server",(a,e)=>U.__executeServer(a,e)),F=_("app_lib_api_companies_mutations_update-company-medias_ts--updateCompanyLogo_createServerFn_handler","/_server",(a,e)=>L.__executeServer(a,e)),G=_("app_lib_api_companies_mutations_update-company-medias_ts--updateCompanyGallery_createServerFn_handler","/_server",(a,e)=>P.__executeServer(a,e)),U=w({method:"POST"}).validator(a=>{const e=y(a,{files:["logo","gallery"],arrays:["gallery","gallery_public_id"]});return g.parse(S,e)}).handler(I,async({data:a})=>{try{const{logo:e,gallery:p,logo_public_id:t,gallery_public_id:c,companyId:o}=a,[l]=await s.select().from(r).where(d(r.id,o));if(e&&e.size>0&&t){const i=await u({file:e,publicId:t});await h(o,{logo:{secureUrl:i.secure_url,publicId:i.public_id}})}if(p&&c){const i=[...l.gallery||[]];await Promise.all(p.map(async(n,m)=>{if(!n.size)return;const b=c[m]?await u({file:n,publicId:c[m]}):await f({type:"gallery",file:n,companyId:o,companySlug:l.slug});i[m]={secureUrl:b.secure_url,publicId:b.public_id}})),await h(o,{gallery:i})}}catch(e){throw console.error("Failed to update company media:",e),new Error("Failed to update company media")}}),L=w({method:"POST"}).validator(a=>{const e=y(a,{files:["logo"]});return g.parse(v,e)}).handler(F,async({data:a})=>{const{logo:e,logo_public_id:p,companyId:t}=a;if(!e?.size)throw new Error("Aucune image de logo fournie");const[c]=await s.select().from(r).where(d(r.id,t)),{secure_url:o,public_id:l}=p?await u({file:e,publicId:p}):await f({type:"logo",file:e,companyId:t,companySlug:c.slug});return await s.update(r).set({logo:{secureUrl:o,publicId:l}}).where(d(r.id,t)),{secure_url:o,public_id:l}}),P=w({method:"POST"}).validator(a=>{const e=y(a,{files:["gallery"],arrays:["gallery","gallery_public_id"]});return g.parse(C,e)}).handler(G,async({data:a})=>{const{gallery:e,gallery_public_id:p,companyId:t}=a;if(!e)throw new Error("Aucune image de galerie fournie");const[c]=await s.select().from(r).where(d(r.id,t)),o=[...c.gallery||[]];return await Promise.all(e.map(async(l,i)=>{if(!l.size)return;const n=p?.[i]?await u({file:l,publicId:p[i]}):await f({type:"gallery",file:l,companyId:t,companySlug:c.slug});o[i]={secureUrl:n.secure_url,publicId:n.public_id}})),await s.update(r).set({gallery:o}).where(d(r.id,t)),o});export{G as updateCompanyGallery_createServerFn_handler,F as updateCompanyLogo_createServerFn_handler,I as updateCompanyMedia_createServerFn_handler};
